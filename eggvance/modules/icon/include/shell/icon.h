#pragma once

#include <array>

namespace shell::icon
{

class Pixel
{
public:
    using uint = unsigned int;

    constexpr Pixel(uint data)
        : data(data) {}

    uint x() const { return (data >> 28) & 0x0F; }
    uint y() const { return (data >> 24) & 0x0F; }
    uint r() const { return (data >> 16) & 0xFF; }
    uint g() const { return (data >>  8) & 0xFF; }
    uint b() const { return (data >>  0) & 0xFF; }

private:
    uint data;
};

inline constexpr std::array<Pixel, 194> kPixels =
{
    0x40000000,
    0x50000000,
    0xB0000000,
    0xC0000000,
    0x31000000,
    0x4126C6DA,
    0x5126C6DA,
    0x61000000,
    0xA1000000,
    0xB126C6DA,
    0xC126C6DA,
    0xD1000000,
    0x22000000,
    0x3226C6DA,
    0x4226C6DA,
    0x5226C6DA,
    0x62000000,
    0x92000000,
    0xA226C6DA,
    0xB226C6DA,
    0xC226C6DA,
    0xD2000000,
    0x23000000,
    0x3326C6DA,
    0x433CCCDE,
    0x5326C6DA,
    0x6326C6DA,
    0x73000000,
    0x93000000,
    0xA326C6DA,
    0xB33CCCDE,
    0xC326C6DA,
    0xD326C6DA,
    0xE3000000,
    0x14000000,
    0x2426C6DA,
    0x3426C6DA,
    0x443CCCDE,
    0x543CCCDE,
    0x6426C6DA,
    0x7426C6DA,
    0x84000000,
    0x9426C6DA,
    0xA426C6DA,
    0xB43CCCDE,
    0xC43CCCDE,
    0xD426C6DA,
    0xE4000000,
    0x15000000,
    0x2526C6DA,
    0x353CCCDE,
    0x453CCCDE,
    0x553CCCDE,
    0x653CCCDE,
    0x7526C6DA,
    0x8526C6DA,
    0x95000000,
    0xA5000000,
    0xB53CCCDE,
    0xC53CCCDE,
    0xD526C6DA,
    0xE5000000,
    0x06000000,
    0x1626C6DA,
    0x2626C6DA,
    0x363CCCDE,
    0x4651D1E2,
    0x5651D1E2,
    0x663CCCDE,
    0x763CCCDE,
    0x8626C6DA,
    0x9626C6DA,
    0xA626C6DA,
    0xB6000000,
    0xC6000000,
    0xD626C6DA,
    0xE626C6DA,
    0xF6000000,
    0x07000000,
    0x17000000,
    0x2726C6DA,
    0x373CCCDE,
    0x4751D1E2,
    0x5751D1E2,
    0x6751D1E2,
    0x773CCCDE,
    0x873CCCDE,
    0x973CCCDE,
    0xA726C6DA,
    0xB726C6DA,
    0xC726C6DA,
    0xD7000000,
    0xE7000000,
    0xF7000000,
    0x08000000,
    0x181A1D21,
    0x28000000,
    0x38000000,
    0x4851D1E2,
    0x5867D7E6,
    0x6851D1E2,
    0x7851D1E2,
    0x88000000,
    0x98000000,
    0xA83CCCDE,
    0xB83CCCDE,
    0xC826C6DA,
    0xD8000000,
    0xE82D333A,
    0xF8000000,
    0x09000000,
    0x191A1D21,
    0x291A1D21,
    0x391A1D21,
    0x49000000,
    0x5967D7E6,
    0x69000000,
    0x79000000,
    0x8924282E,
    0x9924282E,
    0xA9000000,
    0xB93CCCDE,
    0xC9000000,
    0xD92D333A,
    0xE92D333A,
    0xF9000000,
    0x0A000000,
    0x1A1A1D21,
    0x2A1A1D21,
    0x3A1A1D21,
    0x4A1A1D21,
    0x5A000000,
    0x6A1F2327,
    0x7A1F2327,
    0x8A24282E,
    0x9A24282E,
    0xAA24282E,
    0xBA000000,
    0xCA282E34,
    0xDA2D333A,
    0xEA2D333A,
    0xFA000000,
    0x1B000000,
    0x2B1A1D21,
    0x3B1A1D21,
    0x4B1A1D21,
    0x5B1F2327,
    0x6B1F2327,
    0x7B1F2327,
    0x8B24282E,
    0x9B24282E,
    0xAB24282E,
    0xBB282E34,
    0xCB282E34,
    0xDB282E34,
    0xEB000000,
    0x1C000000,
    0x2C1A1D21,
    0x3C1A1D21,
    0x4C1A1D21,
    0x5C1F2327,
    0x6C1F2327,
    0x7C1F2327,
    0x8C1F2327,
    0x9C24282E,
    0xAC24282E,
    0xBC282E34,
    0xCC282E34,
    0xDC282E34,
    0xEC000000,
    0x2D000000,
    0x3D000000,
    0x4D1A1D21,
    0x5D1A1D21,
    0x6D1F2327,
    0x7D1F2327,
    0x8D1F2327,
    0x9D24282E,
    0xAD24282E,
    0xBD24282E,
    0xCD000000,
    0xDD000000,
    0x4E000000,
    0x5E000000,
    0x6E1F2327,
    0x7E1F2327,
    0x8E1F2327,
    0x9E1F2327,
    0xAE000000,
    0xBE000000,
    0x6F000000,
    0x7F000000,
    0x8F000000,
    0x9F000000
};

}  // namespace shell::icon
